<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


    <context:component-scan base-package="com.bytearrays.onecthings"/>
    <context:annotation-config/>
    <tx:annotation-driven transaction-manager="txManager"/>


    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:database/database.properties</value>
                <value>classpath:application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!-- Hibernate session factory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">

        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.bytearrays.onecthings.model"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
            </props>
        </property>
    </bean>

    <bean id="txManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <bean name="FetchTrelloJob" class="org.springframework.scheduling.quartz.JobDetailBean">
        <property name="jobClass" value="com.bytearrays.onecthings.job.FetchTrelloJob"/>
    </bean>

    <bean id="cronTriggerFetchTrelloJob" class="org.springframework.scheduling.quartz.CronTriggerBean">
        <property name="jobDetail" ref="FetchTrelloJob"/>
        <!--<property name="cronExpression" value="0 0/5 * * * ?"/>-->
        <property name="cronExpression" value="0 0/1 * * * ?"/>
    </bean>


    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean" depends-on="quartzDbInitializer">
        <property name="autoStartup" value="true"/>
        <property name="waitForJobsToCompleteOnShutdown" value="false"/>
        <property name="overwriteExistingJobs" value="true"/>
        <property name="jobFactory">
            <bean class="com.bytearrays.onecthings.bean.AutowiringSpringBeanJobFactory"/>
        </property>
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="transactionManager">
            <ref bean="txManager"/>
        </property>
        <property name="jobDetails">
            <list>
                <ref bean="FetchTrelloJob"/>
            </list>
        </property>
        <property name="triggers">
            <list>
                <ref bean="cronTriggerFetchTrelloJob"/>
            </list>
        </property>
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>
                <prop key="org.quartz.jobStore.selectWithLockSQL">SELECT * FROM {0}LOCKS UPDLOCK WHERE LOCK_NAME = ?
                </prop>
            </props>
        </property>
    </bean>


    <bean id="quartzDbInitializer" class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
        <property name="dataSource" ref="dataSource"/>
        <property name="enabled" value="true"/>
        <property name="databasePopulator">
            <bean class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
                <property name="continueOnError" value="true"/>
                <property name="ignoreFailedDrops" value="true"/>
                <property name="sqlScriptEncoding" value="UTF-8"/>
                <property name="scripts">
                    <array>
                        <value type="org.springframework.core.io.Resource">
                            classpath:database/drop_quartz.sql
                        </value>
                        <value type="org.springframework.core.io.Resource">
                            classpath:database/create_quartz.sql
                        </value>
                    </array>
                </property>
            </bean>
        </property>
    </bean>

</beans>